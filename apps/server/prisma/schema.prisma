generator client {
  provider     = "prisma-client"
  output       = "./generated"
  moduleFormat = "esm"
  runtime      = "bun"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @map("_id")
  name               String
  email              String
  emailVerified      Boolean
  image              String?
  createdAt          DateTime
  updatedAt          DateTime
  sessions           Session[]
  accounts           Account[]
  schedules          Schedule[]
  generatedSchedules GeneratedSchedule[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Cinema {
  id             String          @id @default(cuid()) @map("_id")
  code           String          @unique
  name           String
  state          String
  optgroupLabel  String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  movies         Movie[]
  availableDates AvailableDate[]

  @@map("cinema")
}

model Movie {
  id            String         @id @default(cuid()) @map("_id")
  externalId    String // ID do scraper
  title         String
  genre         String?
  duration      String?
  rating        String?
  synopsis      String?
  posterUrl     String?
  cinemaId      String
  cinema        Cinema         @relation(fields: [cinemaId], references: [id], onDelete: Cascade)
  date          String // Data da sessão (YYYY-MM-DD)
  sessions      MovieSession[]
  scheduleItems ScheduleItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@unique([externalId, cinemaId, date])
  @@map("movie")
}

model MovieSession {
  id            String         @id @default(cuid()) @map("_id")
  movieId       String
  movie         Movie          @relation(fields: [movieId], references: [id], onDelete: Cascade)
  time          String
  sessionType   String? // 2D, 3D, etc.
  scheduleItems ScheduleItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("movie_session")
}

model AvailableDate {
  id          String   @id @default(cuid()) @map("_id")
  cinemaCode  String
  cinema      Cinema   @relation(fields: [cinemaCode], references: [code], onDelete: Cascade)
  value       String // Data no formato YYYY-MM-DD
  displayText String // Texto como aparece no site
  dayOfWeek   String?
  dayNumber   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([cinemaCode, value])
  @@map("available_date")
}

model ScrapingJob {
  id          String    @id @default(cuid()) @map("_id")
  cinemaCode  String
  date        String // YYYY-MM-DD
  status      JobStatus @default(PENDING)
  startedAt   DateTime?
  completedAt DateTime?
  error       String?
  moviesFound Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([cinemaCode, date])
  @@map("scraping_job")
}

model Schedule {
  id            String         @id @default(cuid()) @map("_id")
  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  cinemaCode    String
  date          String // YYYY-MM-DD
  name          String
  totalDuration Int // duração total em minutos
  startTime     String? // horário de início do primeiro filme
  endTime       String? // horário de fim do último filme
  items         ScheduleItem[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([userId])
  @@map("schedule")
}

model ScheduleItem {
  id         String       @id @default(cuid()) @map("_id")
  scheduleId String
  schedule   Schedule     @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  movieId    String
  movie      Movie        @relation(fields: [movieId], references: [id], onDelete: Cascade)
  sessionId  String
  session    MovieSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  order      Int // ordem no cronograma
  startTime  String // horário de início calculado
  endTime    String // horário de fim calculado
  travelTime Int          @default(0) // tempo de deslocamento em minutos
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([scheduleId])
  @@map("schedule_item")
}

// Nova tabela para cronogramas temporários gerados
model GeneratedSchedule {
  id                String   @id @default(cuid()) @map("_id")
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  cinemaCode        String
  date              String   // YYYY-MM-DD
  name              String
  totalDuration     Int      // duração total em minutos
  startTime         String   // horário de início do primeiro filme
  endTime           String   // horário de fim do último filme
  feasible          Boolean  @default(false)
  conflicts         String[] // Array de strings para conflitos
  flexibilityOptions Json    @default("{}")
  items             Json     // JSON array dos items completos
  expiresAt         DateTime // TTL para limpeza automática (2 horas)
  createdAt         DateTime @default(now())

  @@index([userId])
  @@index([cinemaCode, date])
  @@index([expiresAt])
  @@map("generated_schedule")
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
}
